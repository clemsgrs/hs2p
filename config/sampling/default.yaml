csv: '' # path to the .csv file containing slide ids, slide paths and annotation mask paths

output_dir: 'output' # folder where to save algorithm output
experiment_name: 'debug'

backend: 'asap'

pixel_mapping:  # mapping annotated categories to their corresponding pixel values
  - 'category_1': 0
  - 'category_2': 1
  - 'category_3': 2

color_mapping:  # [r,g,b] color code of overlayed annotation mask, leave blank if you don't want to overlay anything for a given category
  - 'category_1':
  - 'category_2': [255, 169, 154]
  - 'category_3': [255, 47, 0]

skip_category: ['category_1'] # categories we don't want to save patches for
filtering_threshold: 0.8 # patches with annotated area below filtering_threshold are discarded
alpha: 0.6 # controls the opacity of the annotation mask overlay on the slide & on the patches
sort: False # whether or not to sort patches with annotated area above filtering_threshold by decreasing area
topk: # if sort = True, use this value to only keep the topk patch with highest annotated area for each category
visu: True

seg_params:
  seg_level: -1 # downsample level on which to segment the WSI (-1 = uses the downsample level in the WSI closest to the following downsample parameter)
  downsample: 64 # if seg_level = -1, then uses this value to find the closest downsample level in the WSI for tissue segmentation computation
  sthresh: 8 # segmentation threshold (positive integer, using a higher threshold leads to less foreground and more background detection) (not used when use_otsu=True)
  mthresh: 7 # median filter size (positive, odd integer)
  close: 4 # additional morphological closing to apply following initial thresholding (positive integer)
  use_otsu: True # use otsu's method instead of simple binary thresholding
  visualize_mask: true # save a visualization of the tissue mask as a .jpg image
  tissue_pixel_value: 1 # value of tissue pixel in pre-computed segmentation masks

filter_params:
  ref_patch_size: 256 # reference patch size at spacing patch_params.spacing
  a_t: 16 # area filter threshold for tissue (positive integer, the minimum size of detected foreground contours to consider, relative to the reference patch size ref_patch_size, e.g. a value 10 means only detected foreground contours of size greater than 10 [ref_patch_size, ref_patch_size] sized patches at spacing patch_params.spacing will be processed)
  a_h: 4 # area filter threshold for holes (positive integer, the minimum size of detected holes/cavities in foreground contours to avoid, once again relative to the reference patch size ref_patch_size)
  max_n_holes: 8 # maximum of holes to consider per detected foreground contours (positive integer, higher values lead to more accurate patching but increase computational cost ; keeps the biggest holes)

vis_params:
  vis_level: -1 # downsample level to visualize the segmentation results (-1 = uses the downsample level in the WSI closest to the following downsample parameter)
  downsample: 16 # if vis_level = -1, then uses this value to find the closest downsample level in the WSI for tissue segmentation visualization
  overlay_mask_on_slide: True
  overlay_mask_on_patch: True
  downscale: 64 # downsample to visualize the annotation mask ; same value will be used to display visualize patch sampling results
  line_thickness: 150 # line thickness to draw the segmentation results (positive integer)

patch_params:
  spacing: 0.5 # pixel spacing (in micron/pixel) at which patches should be extracted (will find the level with spacing the closest to this value)
  patch_size: 256 # patch size at previous pixel spacing
  overlap: 0. # percentage of overlap between two consecutive patches (float between 0 and 1)
  downsample: 16 # uses this value to find the closest downsample level in the WSI to get top patch coordinates
  use_padding: True # whether to pad the border of the slide
  contour_fn: 'pct' # contour checking function to decide whether a patch should be considered foreground or background (choices between 'pct' - checks if the given patch has enough tissue using the following parameter as decision threshold, 'four_pt' - checks if all four points in a small grid around the center of the patch are inside the contour, 'center' - checks if the center of the patch is inside the contour, 'basic' - checks if the top-left corner of the patch is inside the contour)
  tissue_thresh: 0.1 # if contour_fn = 'pct', threshold used to filter out patches that have less tissue than this value (percentage)
  drop_holes: False # whether or not to drop patches whose center pixel falls withing an identified holes
  save_patches_to_disk: True # whether or not to save patches as images to disk
  save_npy: False # whether to save patch info in a .npy file
  fmt: 'jpg' # if save_patches_to_disk = True, then saves patches in this file format
  grid_thickness: 1 # sets the grid thickness ((in px) when visualizing sampling results (256: 1, 4096: 2)

speed:
  multiprocessing: False
  num_workers: 4 # number of process to start in parallel

wandb:
  enable: False
  project: 'hs2p'
  exp_name: '${experiment_name}'
  username: 'clemsg'
  dir: '/home/user'
  group:
  tags: []
